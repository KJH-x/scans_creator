import json
import os
import hashlib
from typing import Dict, List, Any

from jsonschema import validate
from jsonschema.exceptions import ValidationError


class ConfigManager:
    """
    Class to manage configuration operations, including loading, saving,
    and creating default configurations if needed.

    Responsibilities:
        - Check if the config file exists and create it if missing.
        - Store default config files.
        - Check if the filepath in the configuration data exists.
        - Load configuration data from the config file.
        - Provide access to configuration data.
        - Update configuration data and save changes.
    """

    def __init__(self) -> None:
        """
        Initializes the ConfigManager with the path to the config file.
        After init, `activate_config()` is needed to run before use.
        """
        self.config_folder: str = "config"
        self.config_schema_folder: str = "schemas"

        # ===============================================================================================================
        # The content below is automatically generated by `ConfigPorperties.generator.py`
        # ===============================================================================================================

        self.defaults_SHA256 = "cb0bba4266696e9f3e2ec5e7c4168f75c4abc133da6f9033aa8cf276c2394177"

        self.config_files: Dict[str, str] = {
            "basic": os.path.join(self.config_folder, "basic.json"),
            "info_layout": os.path.join(self.config_folder, "info_layout.json"),
        }
        self.config_schema_files: Dict[str, str] = {
            "basic": os.path.join(self.config_schema_folder, "basic.schema.json"),
            "info_layout": os.path.join(self.config_schema_folder, "info_layout.schema.json"),
        }

        # ===============================================================================================================
        # The content above is automatically generated by `ConfigPorperties.generator.py`
        # ===============================================================================================================

        self._check_configfile()
        self.active_configfile: str = ""

        # Used for file existence verification in `_validate_file_paths`
        self.common_extensions: List[str] = [".png", ".json", ".ttf"]

    def _check_configfile(self) -> None:
        """
        Check if the configuration file exists, and create missing files.
        """
        back_config_path = os.path.join("schemas", "defaults.json.bak")
        if calculate_sha256(back_config_path) != self.defaults_SHA256:
            raise ValueError(f"Checksum mismatch for {back_config_path}. The file may have been modified.")

        with open(back_config_path, "r", encoding="utf-8") as file:
            default_config_data: Dict = json.load(file)

        # filter: not (_WARNING, _USAGE, _NOTE)
        default_config_data = {key: value for key, value in default_config_data.items() if not key.startswith("_")}

        default_config_data = {
            os.path.join(self.config_folder, key): value for key, value in default_config_data.items()
        }

        check_flag: bool = True
        if not os.path.exists(self.config_folder):
            os.makedirs(self.config_folder)

        for file_path in self.config_files.values():
            if not os.path.exists(file_path):
                try:
                    with open(file_path, "w", encoding="utf-8") as f:
                        json.dump(default_config_data[file_path], f, indent=4)
                    print(f"Created missing config file: {file_path}")
                    check_flag = False
                except KeyError:
                    print(f"Unregistered filename: {file_path}")

        if not check_flag:
            raise ValueError(f"The default configuration file needs to be set before use.")

    def activate_config(self, alias: str):
        # Path of config file
        config_file = self.config_files.get(alias)
        if config_file:
            self.active_configfile = config_file
            self._load_config()
            self._validate_json_schema(alias)
            print(f"Activated config: {alias} -> {config_file}")
        else:
            raise FileNotFoundError(f"Error: Config alias '{alias}' not found.")

    def _validate_json_schema(self, alias: str) -> None:
        try:
            with open(self.config_schema_files[alias], "r", encoding="utf-8") as schema_file:
                schema = json.load(schema_file)

            validate(instance=self.config, schema=schema)
            print(f"JSON file {alias} validation successful")
        except ValidationError as e:
            print("Validation error:", e.message)
        except FileNotFoundError as e:
            print("File not found:", e)
        except json.JSONDecodeError as e:
            print("Invalid JSON format:", e)

    def _load_config(self) -> None:
        """
        Loads the configuration data from the config file and validates
        file paths for font and logo files.

        Raises:
            FileNotFoundError: If the config file does not exist or if specified
                            file paths for font_file, font_file_2, or logo_file do not exist.
            ValueError: If the config file is not a valid JSON.
        """
        with open(self.active_configfile, "r", encoding="utf-8") as f:
            try:
                self.config: dict = json.load(f)
                self._validate_file_paths(self.config)
            except json.JSONDecodeError:
                raise ValueError(f"Failed to decode JSON from {self.active_configfile}.")
            except FileNotFoundError as e:
                raise FileNotFoundError(e)

        # ===============================================================================================================
        # The content below is automatically generated by `ConfigPorperties.generator.py`
        # ===============================================================================================================

        if self.active_configfile == os.path.join(self.config_folder, "basic.json"):
            self.logo_file: str = self.config.get("logo_file", None)  # Path to the logo image file.
            self.resize_scale: int = self.config.get("resize_scale", None)  # Scaling factor for resizing.
            self.avoid_leading: bool = self.config.get(
                "avoid_leading", None
            )  # Indicates whether to avoid leading content.
            self.avoid_ending: bool = self.config.get(
                "avoid_ending", None
            )  # Indicates whether to avoid ending content.
            self.grid_shape: List[Any] = self.config.get(
                "grid_shape", None
            )  # Grid size configuration, represented as an array of two integers.

        if self.active_configfile == os.path.join(self.config_folder, "info_layout.json"):
            self.fonts: List[Dict[str, str]] = self.config.get("fonts", None)  #
            self.font_list: List[int] = self.config.get("font_list", None)  #
            self.time_font: int = self.config.get("time_font", None)  #
            self.horizontal_spacing: int = self.config.get("horizontal_spacing", None)  #
            self.vertical_spacing: int = self.config.get("vertical_spacing", None)  #
            self.content_margin_left: int = self.config.get("content_margin_left", None)  #
            self.content_margin_top: int = self.config.get("content_margin_top", None)  #
            self.title_margin_left: int = self.config.get("title_margin_left", None)  #
            self.title_margin_top: int = self.config.get("title_margin_top", None)  #
            self.shade_offset: List[int] = self.config.get("shade_offset", None)  #
            self.text_color: List[int] = self.config.get("text_color", None)  #
            self.shade_color: List[int] = self.config.get("shade_color", None)  #
            self.text_list: List[List[Dict[str, str] | str]] = self.config.get("text_list", None)  #
            self.pos_list: List[List[int]] = self.config.get("pos_list", None)  #

        # ===============================================================================================================
        # The content above is automatically generated by `ConfigPorperties.generator.py`
        # ===============================================================================================================

    def _validate_file_paths(self, data: dict | list | str) -> None:
        """
        Recursively validates file paths in the given data, checking if any string matches
        a known file extension from `self.common_extensions` and verifying that the file exists.
        Args:
            data (dict | list | str): The input data to be validated. Can be a dictionary,
                                    list, or string.
                                    - If it's a dictionary, it recursively checks the values.
                                    - If it's a list, it recursively checks each item.
                                    - If it's a string, it checks if the string is a valid file path.
                                    - otherwise, skip this data.

        Raises:
            FileNotFoundError: If a string is determined to be a file path and the file does
                                not exist on the filesystem.
        """
        if isinstance(data, dict):
            for key, value in data.items():
                self._validate_file_paths(value)

        elif isinstance(data, list):
            for item in data:
                self._validate_file_paths(item)

        elif isinstance(data, str):
            if any(data.lower().endswith(ext) for ext in self.common_extensions):
                if not os.path.exists(data):
                    raise FileNotFoundError(f"File does not exist: {data}")

    def update(self, key: str, value) -> bool:
        """
        Update a configuration value.
        ! Not tested
        """
        if hasattr(self, key):
            setattr(self, key, value)
            self.save_config()
            return True
        return False

    def save_config(self) -> None:
        """
        Saves the current configuration data back to the config file.
        ! Not tested
        """
        with open(self.active_configfile, "w", encoding="utf-8") as f:
            json.dump(self.config, f, indent=4)
        print(f"Config file saved at {self.active_configfile}.")

    def __getitem__(self, key):
        return self.config.get(key)


def calculate_sha256(json_file_path):
    """
    Read the JSON file, remove whitespace,
    then calculate the SHA256 hash of the cleaned JSON string.

    Args:
        json_file_path (str): Path to the JSON file to be processed.

    Returns:
        str: SHA256 hash of the processed JSON string.
    """
    with open(json_file_path, "r", encoding="utf-8") as file:
        file_content = file.read()

    # remove all whitespace characters (spaces, newlines, etc.)
    cleaned_content = "".join(file_content.split())
    sha256_hash = hashlib.sha256(cleaned_content.encode("utf-8")).hexdigest()
    return sha256_hash
